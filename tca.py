# -*- coding: utf-8 -*-
"""TCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VZOy7zvNdDQGlUAZ4A2HyfHFf-y2y43I
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('customer churn.csv')
df.head()

df.info()



df["TotalCharges"]=df["TotalCharges"].replace(" ","0")
df["TotalCharges"]=df["TotalCharges"].astype(float)

df.info()

df.isnull().sum().sum()

df.describe()

df["customerID"].duplicated().sum()

def conv(value):
  if value == 1:
    return "yes"
  else:
    return "no"
df['SeniorCitizen']=df["SeniorCitizen"].apply(conv)

df.head()

ax = sns.countplot(x ='Churn', data = df)

 ax.bar_label(ax.containers[0])
 plt.title("Count of customers by churn")
plt.show()

plt.figure(figsize=(10,5))
gb = df.groupby("Churn").agg({'Churn':"count"})
plt.pie(gb['Churn'], labels = gb.index, autopct="%1.2f%%")
plt.title("percentage of churned customers",fontsize = 20)
plt.show()

plt.figure(figsize=(8,5))
sns.countplot(x = "SeniorCitizen", data = df,hue = "Churn")
plt.title("count of customers by SeniorCitizen")
plt.show()

counts = df.groupby(["SeniorCitizen", "Churn"]).size().unstack(fill_value=0)

# Calculate percentages
percentages = counts.div(counts.sum(axis=1), axis=0) * 100

# Plot
fig, ax = plt.subplots(figsize=(8, 5))

# Stacked bar chart
percentages.plot(kind='bar', stacked=True, ax=ax, colormap='viridis')

# Add percentage labels on the bars
for i, bar_group in enumerate(ax.containers):
    for bar in bar_group:
        width = bar.get_width()
        height = bar.get_height()
        x, y = bar.get_xy()
        percentage = f'{height:.1f}%'
        if height > 0:  # To avoid adding labels to zero-height bars
            ax.text(x + width / 2, y + height / 2, percentage, ha='center', va='center', fontsize=10, color='white')

# Titles and labels
ax.set_title("Customer Distribution by SeniorCitizen and Churn (as % of total)", fontsize=14)
ax.set_xlabel("SeniorCitizen", fontsize=12)
ax.set_ylabel("Percentage (%)", fontsize=12)
ax.legend(title="Churn")
plt.xticks(rotation=0)

plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Assuming 'df' is your DataFrame

# Calculate the counts
counts = df.groupby(["SeniorCitizen", "Churn"]).size().unstack(fill_value=0)

# Calculate percentages
percentages = counts.div(counts.sum(axis=1), axis=0) * 100

# Define custom colors for the bars
colors = ['blue', 'orange']

# Plot
fig, ax = plt.subplots(figsize=(8, 5))

# Stacked bar chart
percentages.plot(kind='bar', stacked=True, ax=ax, color=colors)

# Add percentage labels on the bars
for i, bar_group in enumerate(ax.containers):
    for bar in bar_group:
        width = bar.get_width()
        height = bar.get_height()
        x, y = bar.get_xy()
        percentage = f'{height:.1f}%'
        if height > 0:  # To avoid adding labels to zero-height bars
            ax.text(x + width / 2, y + height / 2, percentage, ha='center', va='center', fontsize=10, color='white')

# Titles and labels
ax.set_title("Customer Distribution by SeniorCitizen and Churn (as % of total)", fontsize=14)
ax.set_xlabel("SeniorCitizen", fontsize=12)
ax.set_ylabel("Percentage (%)", fontsize=12)
ax.legend(title="Churn", labels=['No Churn', 'Churn'], loc='upper left')
plt.xticks(rotation=0)

plt.show()

plt.figure(figsize=(3,5))
ax = sns.countplot(x = "SeniorCitizen", data = df)
ax.bar_label(ax.containers[0])
plt.title("count of customers by SeniorCitizen")
plt.show()

plt.figure(figsize=(9,5))
sns.histplot(x = "tenure", data = df, bins = 72, hue = "Churn")
plt.show()

plt.figure(figsize=(5,5))
ax = sns.countplot(x = "Contract", data = df, hue = "Churn")
ax.bar_label(ax.containers[0])
plt.title("count of customers by Contract")
plt.show()

plt.figure(figsize=(5,5))
ax = sns.countplot(x = "PaperlessBilling", data = df,hue = "Churn")
ax.bar_label(ax.containers[0])
plt.title("count of customers by PaperlessBilling")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# List of columns
columns = ['PhoneService', 'MultipleLines', 'InternetService',
           'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
           'TechSupport', 'StreamingTV', 'StreamingMovies']

# Determine the grid size for subplots
num_cols = len(columns)
rows = (num_cols + 2) // 3  # 3 columns per row

# Create the figure and axes for subplots
fig, axes = plt.subplots(rows, 3, figsize=(15, rows * 4))
axes = axes.flatten()  # Flatten the axes array for easy indexing

# Create countplots for each column
for i, column in enumerate(columns):
    sns.countplot(data=df, x=column, hue='Churn', palette=['blue', 'orange'], ax=axes[i])
    axes[i].set_title(f"Countplot of {column}", fontsize=12)
    axes[i].set_xlabel("")  # Remove x-axis label for cleaner look
    axes[i].set_ylabel("Count")

# Remove extra subplots if any
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

# Adjust layout
plt.tight_layout()
plt.show()

plt.figure(figsize=(9,5))
ax = sns.countplot(x = "PaymentMethod", data = df, hue = "Churn")
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
plt.title("count of customers by PaymentMethod")
plt.xticks(rotation = 30)
plt.show()

df.columns.values

